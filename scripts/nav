#!/usr/bin/env python

import roslib
import rospy 
from gazebo_msgs.msg import ModelStates
from freefloating_gazebo.msg import BodySetpoint
from geometry_msgs.msg import PoseStamped
import tf
from nav_msgs.msg import Odometry
from pylab import randn, sqrt

class Listener:
    def __init__(self):
        
        # get model
        self.model = rospy.get_namespace().replace('/','')
        self.sub = rospy.Subscriber('/gazebo/model_states', ModelStates, self.state_callback)
        self.received = False
        
        self.sub_sp = rospy.Subscriber('body_setpoint', BodySetpoint, self.sp_callback)
        self.received_sp = False
        
    def state_callback(self, msg): 
        if self.model in msg.name:
            idx = msg.name.index(self.model)        
            self.received = True
            self.pose = msg.pose[idx]
            self.twist = msg.twist[idx]
        
    def sp_callback(self, msg):
        self.received_sp = True
        self.sp = msg.pose


if __name__ == '__main__':
    
    rospy.init_node('nav_odom')   
    br = tf.TransformBroadcaster()
    
    listener = Listener()
    
    # nav estim
    nav_pub = rospy.Publisher('vo', Odometry, queue_size=10)
    odom = Odometry()
    
    cov = [rospy.get_param('~'+s) for s in ['x','y','z','roll','pitch','yaw']]           
    std = [sqrt(v) for v in cov]
    
    odom.child_frame_id = 'base_link'
    odom.header.frame_id = 'world'
    idx_xyz = [0,7,14]
    idx_rpy = [21,28,35]
    for i in xrange(3):
        odom.pose.covariance[7*i] = odom.twist.covariance[7*i] = cov[i]
        odom.pose.covariance[7*i+21] = odom.twist.covariance[7*i+21] = cov[3+i]
            
    # setpoint
    sp_pub = rospy.Publisher('setpoint', PoseStamped, queue_size=10)
    sp = PoseStamped()
    sp.header.frame_id = 'world'    
    
    T =1./100
    while not rospy.is_shutdown():
        
        if listener.received:
            odom.pose.pose = listener.pose
            t = odom.pose.pose.position
            t.x += std[0]*randn()
            t.y += std[1]*randn()
            t.z += std[2]*randn()
            odom.pose.pose.position = t
            
            q = odom.pose.pose.orientation
            rpy = tf.transformations.euler_from_quaternion([q.x, q.y, q.z, q.w])
            rpy = [rpy[i]+std[i+3]*randn() for i in xrange(3)] 
            q = tf.transformations.quaternion_from_euler(rpy[0], rpy[1], rpy[2])
            odom.pose.pose.orientation.x = q[0]
            odom.pose.pose.orientation.y = q[1]
            odom.pose.pose.orientation.z = q[2]
            odom.pose.pose.orientation.w = q[3]
            
            odom.twist.twist = listener.twist
            odom.header.stamp = rospy.Time.now()
            
            #br.sendTransform((t.x, t.y, t.z), (q.x,q.y,q.z,q.w), rospy.Time.now(), 'base_link', 'world')
            nav_pub.publish(odom)
            
            
        if listener.received_sp:
            sp.pose = listener.sp
            sp.header.stamp = rospy.Time.now()
            sp_pub.publish(sp)
            
            
        
        rospy.sleep(T)